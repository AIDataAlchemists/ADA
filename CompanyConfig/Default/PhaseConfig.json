{
  "DomainUnderstanding": {
    "assistant_role_name": "Chief Product Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "ChatDev has made products in various forms before:",
      "Image: can present information in line chart, bar chart, flow chart, cloud chart, Gantt chart, etc.",
      "Document: can present information via .docx files.",
      "PowerPoint: can present information via .pptx files.",
      "Excel: can present information via .xlsx files.",
      "PDF: can present information via .pdf files.",
      "Website: can present personal resume, tutorial, products, or ideas via .html files.",
      "Application: can implement visualized game, software, tool, etc via python.",
      "Dashboard: can display a panel visualizing real-time information.",
      "Mind Map: can represent ideas with related concepts arranged around a core concept.",
      "As the {assistant_role}, to satisfy the new user's demand and make the product realizable, you should keep discussing with me to decide which product modality do we want the product to be?",
      "Note that we must ONLY discuss the product modality and do not discuss anything else! Once we all have expressed our opinion(s) and agree with the results of the discussion, any of us must actively terminate the discussion by replying with only one line, which starts with a single word <INFO>, followed by our final product modality without any other words, e.g., \"<INFO> PowerPoint\"."
    ]
  },
  "DataUnderstanding": {
    "assistant_role_name": "Data Analyst",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below:",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Ideas: \"{ideas}\".",
      "We have decided to complete the task through a executable software implemented via a programming language. ",
      "As the {assistant_role}, to satisfy the new user's demands and make the software realizable, you should propose a concrete programming language. If python can complete this task via Python, please answer Python; otherwise, answer another programming language (e.g., Java, C++, etc.).",
      "Note that we must ONLY discuss the target programming language and do not discuss anything else! Once we all have expressed our opinion(s) and agree with the results of the discussion, any of us must actively terminate the discussion and conclude the best programming language we have discussed without any other words, return only one line using the format: \"<INFO> *\" where \"*\" represents a programming language."
    ]
  },
  "DataCleaning": {
    "assistant_role_name": "Data Engineer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below:",
      "Task: \"{task}\".",
      "Task description: \"{description}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas:\"{ideas}\"",
      "We have decided to complete the task through a executable software with multiple files implemented via {language}. As the {assistant_role}, to satisfy the new user's demands, you should write one or multiple files and make sure that every detail of the architecture is implemented as code. {gui}",
      "Think step by step and reason yourself to the right decisions.",
      "You will first lay out the names of the core classes, functions, methods that will be necessary, along with a quick comment on their purpose.",
      "Then you will output the content of each file including complete code. Each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "You will start with the \"main\" file, then go to the ones that are imported by that file, and so on."
    ]
  },
  "DataPipeline": {
    "assistant_role_name": "Data Engineer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below:",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "According to my test reports, please locate and summarize the bugs that cause the problem."
    ]
  },
  "ExploratoryAnalysis": {
    "assistant_role_name": "Data Analyst",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below:",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Test Reports of Source Codes:",
      "\"{test_reports}\"",
      "According to my test reports, please locate and summarize the bugs that cause the problem."
    ]
  },
  "StatisticalAnalysis": {
    "assistant_role_name": "Statistician",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below:",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Test Reports of Source Codes:",
      "\"{test_reports}\"",
      "Error Summary of Test Reports:",
      "\"{error_summary}\"",
      "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and make the software execute smoothly and robustly, you should modify corresponding codes based on the error summary. Now, use the format exemplified above and modify the problematic codes based on the test reported and corresponding explanations (strictly follow the format defined above, including FILENAME, LANGUAGE, DOCSTRING and CODE; incomplete \"TODO\" codes are strictly prohibited). If no bugs are reported, please return only one line like \"<INFO> Finished\"."
    ]
  },
  "FeatureEngineering": {
    "assistant_role_name": "Data Scientist",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "The new user's task and our developed codes are listed:",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "Codes: ",
      "\"{codes}\"",
      "As the {assistant_role}, you should write a requirements.txt file, which is commonly used in Python projects to specify the dependencies or packages required for the project to run properly. It serves as a way to document and manage the project's dependencies in a standardized format. For example:",
      "requirements.txt",
      "```",
      "numpy==1.19.2",
      "pandas>=1.1.4",
      "```",
      "According to the codes and file format listed above, write a requirements.txt file to specify the dependencies or packages required for the project to run properly."
    ]
  },
  "ModelSelection": {
    "assistant_role_name": "ML Engineer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "ChatDev has made products in various forms before:",
      "Image: can present information in line chart, bar chart, flow chart, cloud chart, Gantt chart, etc.",
      "Document: can present information via .docx files.",
      "PowerPoint: can present information via .pptx files.",
      "Excel: can present information via .xlsx files.",
      "PDF: can present information via .pdf files.",
      "Website: can present personal resume, tutorial, products, or ideas via .html files.",
      "Application: can implement visualized game, software, tool, etc via python.",
      "Dashboard: can display a panel visualizing real-time information.",
      "Mind Map: can represent ideas with related concepts arranged around a core concept.",
      "As the {assistant_role}, to satisfy the new user's demand and make the product realizable, you should keep discussing with me to decide which product modality do we want the product to be?",
      "Note that we must ONLY discuss the product modality and do not discuss anything else! Once we all have expressed our opinion(s) and agree with the results of the discussion, any of us must actively terminate the discussion by replying with only one line, which starts with a single word <INFO>, followed by our final product modality without any other words, e.g., \"<INFO> PowerPoint\"."
    ]
  },
  "ModelTraining": {
    "assistant_role_name": "ML Engineer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below:",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Ideas: \"{ideas}\".",
      "Codes:",
      "\"{codes}\"",
      "As the {assistant_role}, to make the software directly operable without further coding, ChatDev have formulated the following regulations:",
      "1) All referenced classes should be imported;",
      "2) All methods should be implemented;",
      "3) All methods need to have the necessary comments;",
      "4) No potential bugs;",
      "5) The entire project conforms to the tasks proposed by the user;",
      "6) Most importantly, do not only check the errors in the code, but also the logic of the code to ensure that the user can interact with the generated software without losing any features in the requirement;",
      "Now, you should check the above regulations one by one and review the codes in detail, propose one comment with the highest priority about the codes, and give me instructions on how to fix. Tell me your comment with the highest priority and corresponding suggestions on revision. If the codes are perfect, return only one line like \"<INFO> Finished\"."
    ]
  },
  "ModelValidation": {
    "assistant_role_name": "ML Engineer",
    "user_role_name": "Data Scientist",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below:",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Comments on Codes:",
      "\"{comments}\"",
      "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and make the software creative, executive and robust, you should modify corresponding codes according to the comments. Then, output the full and complete codes with all bugs fixed based on the comments. Return all codes strictly following the format defined above."
    ]
  },
  "HyperparameterTuning": {
    "assistant_role_name": "ML Engineer",
    "user_role_name": "Data Scientist",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below:",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Test Reports of Source Codes:",
      "\"{test_reports}\"",
      "Error Summary of Test Reports:",
      "\"{error_summary}\"",
      "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and make the software execute smoothly and robustly, you should modify corresponding codes based on the error summary. Now, use the format exemplified above and modify the problematic codes based on the test reported and corresponding explanations (strictly follow the format defined above, including FILENAME, LANGUAGE, DOCSTRING and CODE; incomplete \"TODO\" codes are strictly prohibited). If no bugs are reported, please return only one line like \"<INFO> Finished\"."
    ]
  },
  "ModelInterpretability": {
    "assistant_role_name": "Model Interpreter",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "The new user's task, our developed codes and required dependencies are listed:",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "Codes: ",
      "\"{codes}\"",
      "Requirements:",
      "\"{requirements}\"",
      "As the {assistant_role}, by using Markdown, you should write a manual.md file which is a detailed user manual to use the software, including introducing main functions of the software, how to install environment dependencies and how to use/play it. For example:",
      "manual.md",
      "```",
      "# LangChain",
      "Building applications with LLMs through composability",
      "Looking for the JS/TS version? Check out LangChain.js.",
      "**Production Support:** As you move into production, we'd love to offer more comprehensive support.",
      "## Quick Install",
      "`pip install langchain`",
      "or",
      "`conda install langchain -c conda-forge`",
      "## 🤔 What is this?",
      "Large language models (LLMs) are emerging as a transformative technology",
      "```"
    ]
  },
  "CodeReview": {
    "assistant_role_name": "Code Reviewer",
    "user_role_name": "Programmer",
    "phase_prompt": [
      "According to the new user's task, our software designs:",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "We have decided to complete the task through a executable software implemented via Python. As the {assistant_role}, to satisfy the user's requirements, you can propose a concrete programming language. If python can complete this task via Python, please answer Python; otherwise, answer another programming language (e.g., Java, C++, etc.).",
      "Note that we must ONLY discuss the target programming language and do not discuss anything else! Once we all have expressed our opinion(s) and agree with the results of the discussion, any of us must actively terminate the discussion and conclude the best programming language we have discussed without any other words, return only one line using the format: \"<INFO> *\" where \"*\" represents a programming language."
    ]
  },
  "TestExecution": {
    "assistant_role_name": "Software Test Engineer",
    "user_role_name": "Programmer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below:",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "According to my test reports, please locate and summarize the bugs that cause the problem."
    ]
  },
  "ErrorSummary": {
    "assistant_role_name": "Software Test Engineer",
    "user_role_name": "Programmer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below:",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Test Reports of Source Codes:",
      "\"{test_reports}\"",
      "According to my test reports, please locate and summarize the bugs that cause the problem."
    ]
  },
  "CorrectionImplementation": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below:",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Test Reports of Source Codes:",
      "\"{test_reports}\"",
      "Error Summary of Test Reports:",
      "\"{error_summary}\"",
      "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and make the software execute smoothly and robustly, you should modify corresponding codes based on the error summary. Now, use the format exemplified above and modify the problematic codes based on the test reported and corresponding explanations (strictly follow the format defined above, including FILENAME, LANGUAGE, DOCSTRING and CODE; incomplete \"TODO\" codes are strictly prohibited). If no bugs are reported, please return only one line like \"<INFO> Finished\"."
    ]
  },
  "Reporting": {
    "assistant_role_name": "Report Writer",
    "user_role_name": "Chief Product Officer",
    "phase_prompt": [
      "The new user's task, our developed codes and required dependencies are listed:",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "Codes: ",
      "\"{codes}\"",
      "Requirements:",
      "\"{requirements}\"",
      "As the {assistant_role}, by using Markdown, you should write a manual.md file which is a detailed user manual to use the software, including introducing main functions of the software, how to install environment dependencies and how to use/play it. For example:",
      "manual.md",
      "```",
      "# LangChain",
      "Building applications with LLMs through composability",
      "Looking for the JS/TS version? Check out LangChain.js.",
      "**Production Support:** As you move into production, we'd love to offer more comprehensive support.",
      "## Quick Install",
      "`pip install langchain`",
      "or",
      "`conda install langchain -c conda-forge`",
      "## 🤔 What is this?",
      "Large language models (LLMs) are emerging as a transformative technology",
      "```"
    ]
  }
}